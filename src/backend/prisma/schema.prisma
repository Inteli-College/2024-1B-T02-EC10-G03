generator client {
    provider = "cargo prisma"
    output   = "../src/db.rs"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Patient {
    uuid          String          @id @default(uuid())
    name          String
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deletedAt     DateTime?
    Transaction   Transaction[]
    PatientReport PatientReport[]

    @@index([name])
}

enum EmployeeRole {
    NURSE
    PHARMACIST
    IT
}

model Employee {
    uuid                  String                  @id @default(uuid())
    role                  EmployeeRole
    name                  String
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    deletedAt             DateTime?
    Transaction           Transaction[]
    OverriddenTransaction OverriddenTransaction[]
    PyxisReport           PyxisReport[]

    @@index([role, name])
}

model MedicineName {
    uuid      String     @id @default(uuid())
    name      String
    createdAt DateTime   @default(now())
    Medicine  Medicine[]

    @@index([name])
}

model Medicine {
    uuid             String        @id @default(uuid())
    externalId       String
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    Transaction      Transaction[]
    Inventory        Inventory[]
    MedicineName     MedicineName? @relation(fields: [medicineNameUuid], references: [uuid])
    medicineNameUuid String?
    PyxisReport      PyxisReport[]

    @@index([externalId])
}

enum TransactionType {
    IN
    OUT
}

model Transaction {
    uuid           String          @id @default(uuid())
    type           TransactionType
    employee       Employee        @relation(fields: [employeeUuid], references: [uuid])
    employeeUuid   String
    patient        Patient         @relation(fields: [patientUuid], references: [uuid])
    patientUuid    String
    medicine       Medicine        @relation(fields: [medicineUuid], references: [uuid])
    medicineUuid   String
    quantity       Int
    validation     Validation      @relation(fields: [validationUuid], references: [uuid])
    validationUuid String
    createdAt      DateTime        @default(now())
    PatientReport  PatientReport[]

    @@index([employeeUuid, patientUuid, medicineUuid])
}

model OverriddenTransaction {
    uuid           String     @id @default(uuid())
    employee       Employee   @relation(fields: [employeeUuid], references: [uuid])
    employeeUuid   String
    validation     Validation @relation(fields: [validationUuid], references: [uuid])
    validationUuid String
    overrideReason String
    createdAt      DateTime   @default(now())

    @@index([employeeUuid, validationUuid])
}

enum ValidationStatus {
    SUSPECT
    NORMAL
    UNVERIFIED
}

model Validation {
    uuid                  String                  @id @default(uuid())
    openTime              Int
    override              Boolean                 @default(false)
    suposedQuantity       Int
    patientAcceptance     Boolean                 @default(true)
    createdAt             DateTime                @default(now())
    status                ValidationStatus        @default(UNVERIFIED)
    Transaction           Transaction[]
    OverriddenTransaction OverriddenTransaction[]

    @@index([status])
}

model Pyxis {
    uuid        String        @id @default(uuid())
    floor       Int
    block       String
    extra_data  Json          @default("{}")
    createdAt   DateTime      @default(now())
    Inventory   Inventory[]
    PyxisReport PyxisReport[]

    @@index([floor, block])
}

model Inventory {
    medicine     Medicine @relation(fields: [medicineUuid], references: [uuid])
    medicineUuid String
    pyxis        Pyxis    @relation(fields: [pyxisUuid], references: [uuid])
    pyxisUuid    String
    quantity     Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@id([pyxisUuid, medicineUuid])
    @@index([pyxisUuid, medicineUuid])
}

enum LogLevel {
    DEBUG
    INFO
    WARNING
    ERROR
}

enum LogEvent {
    PYXIS
    BACKEND
    DATABASE
    TRANSACTION
    INVENTORY
    EMPLOYEE
    PATIENT
    MEDICINE
    VALIDATION
}

model Log {
    cuid      String   @id @default(cuid())
    level     LogLevel
    event     LogEvent
    data      Json
    createdAt DateTime @default(now())

    @@index([level, event])
}

enum PyxisReportType {
    DATA_INCONSISTENCY
    NEEDS_REFILL
}

enum PyxisReportStatus {
    SENT
    RECEIVED
    PENDING
    FINISHED
}

model PyxisReport {
    cuid         String          @id @default(cuid())
    pyxis        Pyxis           @relation(fields: [pyxisUuid], references: [uuid])
    pyxisUuid    String
    employee     Employee        @relation(fields: [employeeUuid], references: [uuid])
    employeeUuid String
    medicine     Medicine        @relation(fields: [medicineUuid], references: [uuid])
    medicineUuid String
    type         PyxisReportType
    observation  String
    urgency      Boolean

    @@index([pyxisUuid])
}

enum PatientReportType {
    NOT_CONSUMED
    QUANTITY_MISMATCH
}

model PatientReport {
    cuid            String            @id @default(cuid())
    patient         Patient           @relation(fields: [patientUuid], references: [uuid])
    patientUuid     String
    transaction     Transaction       @relation(fields: [transactionUuid], references: [uuid])
    transactionUuid String
    type            PatientReportType
    observation     String

    @@index([patientUuid])
}
